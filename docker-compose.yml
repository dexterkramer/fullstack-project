version: "3.8"
services:

  api:
    image: my_api:latest
    build:
      dockerfile: Dockerfile
      context: ./apis/${API_PATH}
      target: development
      args:
        - NODE_ENV=${NODE_ENV}
    container_name: ${API_CONTAINER_NAME}
    volumes:
      - "./apis/${API_PATH}/src:/opt/app/src"
      - "./apis/${API_PATH}/test:/opt/app/test"
      - "./apis/${API_PATH}/nest-cli.json:/opt/app/nest-cli.json"
      - "./apis/${API_PATH}/tsconfig.json:/opt/app/tsconfig.json"
      - "./apis/${API_PATH}/tsconfig.build.json:/opt/app/tsconfig.build.json"
      - "./apis/${API_PATH}/.env:/opt/app/.env"
    command: ./node_modules/.bin/nest start --watch
    environment: 
      NODE_ENV: ${NODE_ENV}
      JWT_SECRET: 1hard_to_guess_secret7890a
      PORT: ${NEST_SERVER_PORT}
    ports:
      - ${NEST_SERVER_PORT}:${NEST_SERVER_PORT}
      # debugging port
      - 9229:9229
    networks:
      - fullstack_net
    depends_on:
      neo4j:
        condition: service_healthy

  client:
    image: my_client:latest
    build:
      dockerfile: Dockerfile
      context: ./clients/${CLIENT_PATH}
      args:
        - NODE_ENV=${NODE_ENV}
    container_name: ${CLIENT_CONTAINER_NAME}
    volumes:
      - "./clients/${CLIENT_PATH}/src:/opt/app/src"
      - "./clients/${CLIENT_PATH}/angular.json:/opt/app/angular.json"
      - "./clients/${CLIENT_PATH}/karma.conf.js:/opt/app/karma.conf.js"
      - "./clients/${CLIENT_PATH}/tsconfig.app.json:/opt/app/tsconfig.app.json"
      - "./clients/${CLIENT_PATH}/tsconfig.spec.json:/opt/app/tsconfig.spec.json"
      - "./clients/${CLIENT_PATH}/tsconfig.json:/opt/app/tsconfig.json"
    command: sh -c "./node_modules/.bin/ng serve --port 4200 --host 0.0.0.0 --poll 2000"
    ports:
      - 4200:4200
      # debugging port
      - 49153:49153

#############################
######### neo4j #############
#############################
  
  neo4j:
    build:
      dockerfile: Dockerfile
      context: ./datas/${NEO4J_PATH}
    hostname: ${NEO4J_HOSTNAME}
    container_name: neo4j
    restart: always
    environment:
      NEO4J_AUTH: ${NEO4J_USERNAME}/${NEO4J_PASSWORD}
      NEO4J_dbms_memory_heap_max__size: ${NEO4J_MEM_HEAP}
      NEO4J_dbms_connector_bolt_advertised__address: "0.0.0.0:${NEO4J_BOLT_PORT}"
      NEO4J_dbms_security_procedures_unrestricted: "apoc.*"
      NEO4J_dbms.shell.enabled: "true"
      NEO4J_apoc_import_file_enabled: "true"
      NEO4J_apoc_export_file_enabled: "true"
      NEO4J_dbms.default_listen_address: 0.0.0.0
      NEO4J_dbms_default__database: ${NEO4J_DATABASE}
      # NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
      # NEO4J_apoc_initializer_cypher: "CALL apoc.cypher.runFile('file:///apoc.cypher_query.cypher')"
      # NEO4JLABS_PLUGINS: '["apoc"]'
      # NEO4J_dbms_logs_debug_level: DEBUG
      NEO4J_kafka_bootstrap_servers: broker:9093
      # NEO4J_dbms.security.procedures.whitelist: apoc.coll.*,apoc.load.*,apoc.cypher.*
    ports:
      - "7474:${NEO4J_PORT}"  # Go to http://localhost:7474/browser/ after bootstrapping
      - "7687:${NEO4J_BOLT_PORT}"
    volumes:
      - "./datas/${NEO4J_PATH}/neo4j-runtime/db/data:/data"
      - "./datas/${NEO4J_PATH}/neo4j-runtime/logs:/logs"
      - "./datas/${NEO4J_PATH}/neo4j-runtime/import:/import"
      - "./datas/${NEO4J_PATH}/neo4j-runtime/plugins:/plugins"
    networks:
      - fullstack_net
    healthcheck:
      test: [ "CMD", "/var/lib/neo4j/bin/cypher-shell", "-u", "${NEO4J_USERNAME}", "-p", "${NEO4J_PASSWORD}", "MATCH () RETURN count(*) as count LIMIT 1" ]
      interval: 3s
      timeout: 3s
      retries: 50
      start_period: 40s

# # #############################
# # ######### keycloak ##########
# # #############################

  kc-postgres:
    image: postgres
    container_name: kc-postgres
    environment:
      - POSTGRES_USER=${KC_DB_USER}
      - POSTGRES_DATABASE=${KC_DB_DATABASE}
      - POSTGRES_PASSWORD=${KC_DB_PASSWORD}
    volumes:
      - "./keycloak/postgres_data:/var/lib/postgresql/data"
    networks:
      - fullstack_net
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d keycloak -U keycloak"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  keycloak:
    image: quay.io/keycloak/keycloak:19.0.1
    container_name: keycloak
    # volumes:
    #   - /etc/localtime:/etc/localtime:ro
    # add plugins for hot deployment in running in KC
    #   - ./plugins:/opt/jboss/keycloak/standalone/deployments/
    volumes:
      - "./keycloak/realms/import:/tmp/import"
    command: start-dev
    # entrypoint: /opt/keycloak/bin/kc.sh start --auto-build
    env_file:
      - ./keycloak/.env
    environment:
      KC_FEATURES:
        authorization
        token-exchange
        docker
        impersonation
        scripts
        upload-scripts
        web-authn
        client-policies
        dynamic-scopes
    networks:
      - fullstack_net
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:8080/realms/master"]
      start_period: 10s
      interval: 10s
      retries: 9
      timeout: 5s
    depends_on:
      kc-postgres:
        condition: service_healthy

networks:
  fullstack_net:
    driver: bridge